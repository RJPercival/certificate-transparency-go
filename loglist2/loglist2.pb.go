// Code generated by protoc-gen-go. DO NOT EDIT.
// source: loglist2.proto

package loglist2

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// LogList holds a collection of CT logs, grouped by operator.
type LogList struct {
	// Operators contains a list of CT log operators and the logs they operate.
	Operators            []*Operator `protobuf:"bytes,1,rep,name=operators,proto3" json:"operators,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *LogList) Reset()         { *m = LogList{} }
func (m *LogList) String() string { return proto.CompactTextString(m) }
func (*LogList) ProtoMessage()    {}
func (*LogList) Descriptor() ([]byte, []int) {
	return fileDescriptor_c269ea0856540e7b, []int{0}
}

func (m *LogList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LogList.Unmarshal(m, b)
}
func (m *LogList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LogList.Marshal(b, m, deterministic)
}
func (m *LogList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LogList.Merge(m, src)
}
func (m *LogList) XXX_Size() int {
	return xxx_messageInfo_LogList.Size(m)
}
func (m *LogList) XXX_DiscardUnknown() {
	xxx_messageInfo_LogList.DiscardUnknown(m)
}

var xxx_messageInfo_LogList proto.InternalMessageInfo

func (m *LogList) GetOperators() []*Operator {
	if m != nil {
		return m.Operators
	}
	return nil
}

// Operator holds a collection of CT logs run by the same organisation.
// It also provides information about that organisation, e.g. contact details.
type Operator struct {
	// Name is the name of the CT log operator.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Email lists the email addresses that can be used to contact this log operator.
	Email []string `protobuf:"bytes,2,rep,name=email,proto3" json:"email,omitempty"`
	// Logs is a map of unique names to CT logs run by this operator.
	Logs                 []*Log   `protobuf:"bytes,3,rep,name=logs,proto3" json:"logs,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Operator) Reset()         { *m = Operator{} }
func (m *Operator) String() string { return proto.CompactTextString(m) }
func (*Operator) ProtoMessage()    {}
func (*Operator) Descriptor() ([]byte, []int) {
	return fileDescriptor_c269ea0856540e7b, []int{1}
}

func (m *Operator) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Operator.Unmarshal(m, b)
}
func (m *Operator) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Operator.Marshal(b, m, deterministic)
}
func (m *Operator) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Operator.Merge(m, src)
}
func (m *Operator) XXX_Size() int {
	return xxx_messageInfo_Operator.Size(m)
}
func (m *Operator) XXX_DiscardUnknown() {
	xxx_messageInfo_Operator.DiscardUnknown(m)
}

var xxx_messageInfo_Operator proto.InternalMessageInfo

func (m *Operator) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Operator) GetEmail() []string {
	if m != nil {
		return m.Email
	}
	return nil
}

func (m *Operator) GetLogs() []*Log {
	if m != nil {
		return m.Logs
	}
	return nil
}

// Log describes a single CT log.
type Log struct {
	// Description is a human-readable string that describes the log.
	Description string `protobuf:"bytes,1,opt,name=description,proto3" json:"description,omitempty"`
	// LogID is the SHA-256 hash of the log's public key.
	LogId []byte `protobuf:"bytes,2,opt,name=log_id,json=logId,proto3" json:"log_id,omitempty"`
	// Key is the public key with which signatures can be verified.
	Key []byte `protobuf:"bytes,3,opt,name=key,proto3" json:"key,omitempty"`
	// URL is the address of the HTTPS API.
	Url string `protobuf:"bytes,4,opt,name=url,proto3" json:"url,omitempty"`
	// DNS is the address of the DNS API.
	Dns string `protobuf:"bytes,5,opt,name=dns,proto3" json:"dns,omitempty"`
	// MMD is the Maximum Merge Delay, in seconds. All submitted
	// certificates must be incorporated into the log within this time.
	Mmd int32 `protobuf:"varint,6,opt,name=mmd,proto3" json:"mmd,omitempty"`
	// State is the current state of the log, from the perspective of the
	// log list distributor.
	State *Log_State `protobuf:"bytes,7,opt,name=state,proto3" json:"state,omitempty"`
	// TemporalInterval, if set, indicates that this log only accepts
	// certificates with a NotBefore date in this time range.
	TemporalInterval *TemporalInterval `protobuf:"bytes,8,opt,name=temporal_interval,json=temporalInterval,proto3" json:"temporal_interval,omitempty"`
	// Type indicates the purpose of this log, e.g. "test" or "prod".
	Type                 string   `protobuf:"bytes,9,opt,name=type,proto3" json:"type,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Log) Reset()         { *m = Log{} }
func (m *Log) String() string { return proto.CompactTextString(m) }
func (*Log) ProtoMessage()    {}
func (*Log) Descriptor() ([]byte, []int) {
	return fileDescriptor_c269ea0856540e7b, []int{2}
}

func (m *Log) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Log.Unmarshal(m, b)
}
func (m *Log) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Log.Marshal(b, m, deterministic)
}
func (m *Log) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Log.Merge(m, src)
}
func (m *Log) XXX_Size() int {
	return xxx_messageInfo_Log.Size(m)
}
func (m *Log) XXX_DiscardUnknown() {
	xxx_messageInfo_Log.DiscardUnknown(m)
}

var xxx_messageInfo_Log proto.InternalMessageInfo

func (m *Log) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Log) GetLogId() []byte {
	if m != nil {
		return m.LogId
	}
	return nil
}

func (m *Log) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *Log) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *Log) GetDns() string {
	if m != nil {
		return m.Dns
	}
	return ""
}

func (m *Log) GetMmd() int32 {
	if m != nil {
		return m.Mmd
	}
	return 0
}

func (m *Log) GetState() *Log_State {
	if m != nil {
		return m.State
	}
	return nil
}

func (m *Log) GetTemporalInterval() *TemporalInterval {
	if m != nil {
		return m.TemporalInterval
	}
	return nil
}

func (m *Log) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

type Log_State struct {
	// Types that are valid to be assigned to State:
	//	*Log_State_Pending
	//	*Log_State_Qualified
	//	*Log_State_Usable
	//	*Log_State_Readonly
	//	*Log_State_Retired
	//	*Log_State_Rejected
	State                isLog_State_State `protobuf_oneof:"state"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *Log_State) Reset()         { *m = Log_State{} }
func (m *Log_State) String() string { return proto.CompactTextString(m) }
func (*Log_State) ProtoMessage()    {}
func (*Log_State) Descriptor() ([]byte, []int) {
	return fileDescriptor_c269ea0856540e7b, []int{2, 0}
}

func (m *Log_State) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Log_State.Unmarshal(m, b)
}
func (m *Log_State) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Log_State.Marshal(b, m, deterministic)
}
func (m *Log_State) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Log_State.Merge(m, src)
}
func (m *Log_State) XXX_Size() int {
	return xxx_messageInfo_Log_State.Size(m)
}
func (m *Log_State) XXX_DiscardUnknown() {
	xxx_messageInfo_Log_State.DiscardUnknown(m)
}

var xxx_messageInfo_Log_State proto.InternalMessageInfo

type isLog_State_State interface {
	isLog_State_State()
}

type Log_State_Pending struct {
	Pending *LogState `protobuf:"bytes,1,opt,name=pending,proto3,oneof"`
}

type Log_State_Qualified struct {
	Qualified *LogState `protobuf:"bytes,2,opt,name=qualified,proto3,oneof"`
}

type Log_State_Usable struct {
	Usable *LogState `protobuf:"bytes,3,opt,name=usable,proto3,oneof"`
}

type Log_State_Readonly struct {
	Readonly *ReadOnlyLogState `protobuf:"bytes,4,opt,name=readonly,proto3,oneof"`
}

type Log_State_Retired struct {
	Retired *LogState `protobuf:"bytes,5,opt,name=retired,proto3,oneof"`
}

type Log_State_Rejected struct {
	Rejected *LogState `protobuf:"bytes,6,opt,name=rejected,proto3,oneof"`
}

func (*Log_State_Pending) isLog_State_State() {}

func (*Log_State_Qualified) isLog_State_State() {}

func (*Log_State_Usable) isLog_State_State() {}

func (*Log_State_Readonly) isLog_State_State() {}

func (*Log_State_Retired) isLog_State_State() {}

func (*Log_State_Rejected) isLog_State_State() {}

func (m *Log_State) GetState() isLog_State_State {
	if m != nil {
		return m.State
	}
	return nil
}

func (m *Log_State) GetPending() *LogState {
	if x, ok := m.GetState().(*Log_State_Pending); ok {
		return x.Pending
	}
	return nil
}

func (m *Log_State) GetQualified() *LogState {
	if x, ok := m.GetState().(*Log_State_Qualified); ok {
		return x.Qualified
	}
	return nil
}

func (m *Log_State) GetUsable() *LogState {
	if x, ok := m.GetState().(*Log_State_Usable); ok {
		return x.Usable
	}
	return nil
}

func (m *Log_State) GetReadonly() *ReadOnlyLogState {
	if x, ok := m.GetState().(*Log_State_Readonly); ok {
		return x.Readonly
	}
	return nil
}

func (m *Log_State) GetRetired() *LogState {
	if x, ok := m.GetState().(*Log_State_Retired); ok {
		return x.Retired
	}
	return nil
}

func (m *Log_State) GetRejected() *LogState {
	if x, ok := m.GetState().(*Log_State_Rejected); ok {
		return x.Rejected
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Log_State) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Log_State_Pending)(nil),
		(*Log_State_Qualified)(nil),
		(*Log_State_Usable)(nil),
		(*Log_State_Readonly)(nil),
		(*Log_State_Retired)(nil),
		(*Log_State_Rejected)(nil),
	}
}

// TemporalInterval is a time range.
type TemporalInterval struct {
	// StartInclusive is the beginning of the time range.
	StartInclusive string `protobuf:"bytes,1,opt,name=start_inclusive,json=startInclusive,proto3" json:"start_inclusive,omitempty"`
	// EndExclusive is just after the end of the time range.
	EndExclusive         string   `protobuf:"bytes,2,opt,name=end_exclusive,json=endExclusive,proto3" json:"end_exclusive,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TemporalInterval) Reset()         { *m = TemporalInterval{} }
func (m *TemporalInterval) String() string { return proto.CompactTextString(m) }
func (*TemporalInterval) ProtoMessage()    {}
func (*TemporalInterval) Descriptor() ([]byte, []int) {
	return fileDescriptor_c269ea0856540e7b, []int{3}
}

func (m *TemporalInterval) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TemporalInterval.Unmarshal(m, b)
}
func (m *TemporalInterval) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TemporalInterval.Marshal(b, m, deterministic)
}
func (m *TemporalInterval) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TemporalInterval.Merge(m, src)
}
func (m *TemporalInterval) XXX_Size() int {
	return xxx_messageInfo_TemporalInterval.Size(m)
}
func (m *TemporalInterval) XXX_DiscardUnknown() {
	xxx_messageInfo_TemporalInterval.DiscardUnknown(m)
}

var xxx_messageInfo_TemporalInterval proto.InternalMessageInfo

func (m *TemporalInterval) GetStartInclusive() string {
	if m != nil {
		return m.StartInclusive
	}
	return ""
}

func (m *TemporalInterval) GetEndExclusive() string {
	if m != nil {
		return m.EndExclusive
	}
	return ""
}

// LogState contains details on the current state of a CT log.
type LogState struct {
	// Timestamp is the time when the state began.
	Timestamp            string   `protobuf:"bytes,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LogState) Reset()         { *m = LogState{} }
func (m *LogState) String() string { return proto.CompactTextString(m) }
func (*LogState) ProtoMessage()    {}
func (*LogState) Descriptor() ([]byte, []int) {
	return fileDescriptor_c269ea0856540e7b, []int{4}
}

func (m *LogState) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LogState.Unmarshal(m, b)
}
func (m *LogState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LogState.Marshal(b, m, deterministic)
}
func (m *LogState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LogState.Merge(m, src)
}
func (m *LogState) XXX_Size() int {
	return xxx_messageInfo_LogState.Size(m)
}
func (m *LogState) XXX_DiscardUnknown() {
	xxx_messageInfo_LogState.DiscardUnknown(m)
}

var xxx_messageInfo_LogState proto.InternalMessageInfo

func (m *LogState) GetTimestamp() string {
	if m != nil {
		return m.Timestamp
	}
	return ""
}

// ReadOnlyLogState contains details on the current state of a read-only CT log.
type ReadOnlyLogState struct {
	// Timestamp is the time when the state began.
	Timestamp string `protobuf:"bytes,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// FinalTreeHead is the root hash and tree size that the CT log was
	// made read-only at. This should never change while the log is read-only.
	FinalTreeHead        *TreeHead `protobuf:"bytes,2,opt,name=final_tree_head,json=finalTreeHead,proto3" json:"final_tree_head,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *ReadOnlyLogState) Reset()         { *m = ReadOnlyLogState{} }
func (m *ReadOnlyLogState) String() string { return proto.CompactTextString(m) }
func (*ReadOnlyLogState) ProtoMessage()    {}
func (*ReadOnlyLogState) Descriptor() ([]byte, []int) {
	return fileDescriptor_c269ea0856540e7b, []int{5}
}

func (m *ReadOnlyLogState) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReadOnlyLogState.Unmarshal(m, b)
}
func (m *ReadOnlyLogState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReadOnlyLogState.Marshal(b, m, deterministic)
}
func (m *ReadOnlyLogState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReadOnlyLogState.Merge(m, src)
}
func (m *ReadOnlyLogState) XXX_Size() int {
	return xxx_messageInfo_ReadOnlyLogState.Size(m)
}
func (m *ReadOnlyLogState) XXX_DiscardUnknown() {
	xxx_messageInfo_ReadOnlyLogState.DiscardUnknown(m)
}

var xxx_messageInfo_ReadOnlyLogState proto.InternalMessageInfo

func (m *ReadOnlyLogState) GetTimestamp() string {
	if m != nil {
		return m.Timestamp
	}
	return ""
}

func (m *ReadOnlyLogState) GetFinalTreeHead() *TreeHead {
	if m != nil {
		return m.FinalTreeHead
	}
	return nil
}

// TreeHead is the root hash and tree size of a CT log.
type TreeHead struct {
	// SHA256RootHash is the root hash of the CT log's Merkle tree.
	Sha256RootHash []byte `protobuf:"bytes,1,opt,name=sha256_root_hash,json=sha256RootHash,proto3" json:"sha256_root_hash,omitempty"`
	// TreeSize is the size of the CT log's Merkle tree.
	TreeSize             int64    `protobuf:"varint,2,opt,name=tree_size,json=treeSize,proto3" json:"tree_size,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TreeHead) Reset()         { *m = TreeHead{} }
func (m *TreeHead) String() string { return proto.CompactTextString(m) }
func (*TreeHead) ProtoMessage()    {}
func (*TreeHead) Descriptor() ([]byte, []int) {
	return fileDescriptor_c269ea0856540e7b, []int{6}
}

func (m *TreeHead) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TreeHead.Unmarshal(m, b)
}
func (m *TreeHead) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TreeHead.Marshal(b, m, deterministic)
}
func (m *TreeHead) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TreeHead.Merge(m, src)
}
func (m *TreeHead) XXX_Size() int {
	return xxx_messageInfo_TreeHead.Size(m)
}
func (m *TreeHead) XXX_DiscardUnknown() {
	xxx_messageInfo_TreeHead.DiscardUnknown(m)
}

var xxx_messageInfo_TreeHead proto.InternalMessageInfo

func (m *TreeHead) GetSha256RootHash() []byte {
	if m != nil {
		return m.Sha256RootHash
	}
	return nil
}

func (m *TreeHead) GetTreeSize() int64 {
	if m != nil {
		return m.TreeSize
	}
	return 0
}

func init() {
	proto.RegisterType((*LogList)(nil), "LogList")
	proto.RegisterType((*Operator)(nil), "Operator")
	proto.RegisterType((*Log)(nil), "Log")
	proto.RegisterType((*Log_State)(nil), "Log.State")
	proto.RegisterType((*TemporalInterval)(nil), "TemporalInterval")
	proto.RegisterType((*LogState)(nil), "LogState")
	proto.RegisterType((*ReadOnlyLogState)(nil), "ReadOnlyLogState")
	proto.RegisterType((*TreeHead)(nil), "TreeHead")
}

func init() { proto.RegisterFile("loglist2.proto", fileDescriptor_c269ea0856540e7b) }

var fileDescriptor_c269ea0856540e7b = []byte{
	// 549 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x93, 0x4d, 0x6f, 0xd4, 0x3e,
	0x10, 0xc6, 0xff, 0xbb, 0xd9, 0xb7, 0x4c, 0xdf, 0xb6, 0xd6, 0x1f, 0x29, 0x02, 0x0e, 0x51, 0x2a,
	0xd4, 0x70, 0x59, 0xc4, 0x22, 0x38, 0x72, 0x40, 0x42, 0x6a, 0xa5, 0x15, 0x15, 0x6e, 0xef, 0xc1,
	0x5d, 0x4f, 0xb3, 0x06, 0xc7, 0x0e, 0xb6, 0xb7, 0x62, 0xfb, 0x05, 0xe0, 0x63, 0x23, 0x3b, 0x49,
	0xb7, 0xca, 0x81, 0xdb, 0xf8, 0xf7, 0x3c, 0x19, 0xcf, 0x3c, 0x49, 0xe0, 0x58, 0xea, 0x52, 0x0a,
	0xeb, 0x96, 0x8b, 0xda, 0x68, 0xa7, 0xb3, 0x25, 0x4c, 0x57, 0xba, 0x5c, 0x09, 0xeb, 0xc8, 0x39,
	0xc4, 0xba, 0x46, 0xc3, 0x9c, 0x36, 0x36, 0x19, 0xa4, 0x51, 0x7e, 0xb0, 0x8c, 0x17, 0x57, 0x2d,
	0xa1, 0x7b, 0x2d, 0xfb, 0x02, 0xb3, 0x0e, 0x13, 0x02, 0x23, 0xc5, 0x2a, 0x4c, 0x06, 0xe9, 0x20,
	0x8f, 0x69, 0xa8, 0xc9, 0xff, 0x30, 0xc6, 0x8a, 0x09, 0x99, 0x0c, 0xd3, 0x28, 0x8f, 0x69, 0x73,
	0x20, 0x09, 0x8c, 0xa4, 0x2e, 0x6d, 0x12, 0x85, 0xce, 0xa3, 0xc5, 0x4a, 0x97, 0x34, 0x90, 0xec,
	0xf7, 0x08, 0xa2, 0x95, 0x2e, 0x49, 0x0a, 0x07, 0x1c, 0xed, 0xda, 0x88, 0xda, 0x09, 0xad, 0xda,
	0x96, 0x4f, 0x11, 0x79, 0x06, 0x13, 0xa9, 0xcb, 0x42, 0xf0, 0x64, 0x98, 0x0e, 0xf2, 0x43, 0x3a,
	0x96, 0xba, 0xbc, 0xe4, 0x64, 0x0e, 0xd1, 0x0f, 0xdc, 0x25, 0x51, 0x60, 0xbe, 0xf4, 0x64, 0x6b,
	0x64, 0x32, 0x0a, 0x2d, 0x7c, 0xe9, 0x09, 0x57, 0x36, 0x19, 0x37, 0x84, 0x2b, 0xeb, 0x49, 0x55,
	0xf1, 0x64, 0x92, 0x0e, 0xf2, 0x31, 0xf5, 0x25, 0x49, 0x61, 0x6c, 0x1d, 0x73, 0x98, 0x4c, 0xd3,
	0x41, 0x7e, 0xb0, 0x04, 0x3f, 0xe3, 0xe2, 0xda, 0x13, 0xda, 0x08, 0xe4, 0x23, 0x9c, 0x3a, 0xac,
	0x6a, 0x6d, 0x98, 0x2c, 0x84, 0x72, 0x68, 0xee, 0x99, 0x4c, 0x66, 0xc1, 0x7d, 0xba, 0xb8, 0x69,
	0x95, 0xcb, 0x56, 0xa0, 0x73, 0xd7, 0x23, 0x3e, 0x2e, 0xb7, 0xab, 0x31, 0x89, 0x9b, 0xb8, 0x7c,
	0xfd, 0xfc, 0xcf, 0x10, 0xc6, 0xe1, 0x12, 0xf2, 0x0a, 0xa6, 0x35, 0x2a, 0x2e, 0x54, 0x19, 0x96,
	0xf7, 0xf9, 0xaf, 0x74, 0x19, 0xb4, 0x8b, 0xff, 0x68, 0xa7, 0x91, 0xd7, 0x10, 0xff, 0xdc, 0x32,
	0x29, 0xee, 0x04, 0x36, 0x41, 0xf4, 0x8c, 0x7b, 0x95, 0x9c, 0xc1, 0x64, 0x6b, 0xd9, 0xad, 0xc4,
	0x10, 0x4e, 0xcf, 0xd7, 0x4a, 0xe4, 0x0d, 0xcc, 0x0c, 0x32, 0xae, 0x95, 0xdc, 0x85, 0xc4, 0xfc,
	0x2e, 0x14, 0x19, 0xbf, 0x52, 0x72, 0xf7, 0xc4, 0xfe, 0x68, 0xf2, 0x73, 0x1a, 0x74, 0xc2, 0x20,
	0x0f, 0x79, 0xf6, 0xe7, 0x6c, 0x35, 0x72, 0xee, 0xfb, 0x7e, 0xc7, 0xb5, 0xc3, 0x26, 0xe5, 0x9e,
	0xef, 0x51, 0xfc, 0x34, 0x6d, 0x73, 0xcf, 0xbe, 0xc1, 0xbc, 0x1f, 0x22, 0x39, 0x87, 0x13, 0xeb,
	0x98, 0x71, 0x85, 0x50, 0x6b, 0xb9, 0xb5, 0xe2, 0xbe, 0xfb, 0xd8, 0x8e, 0x03, 0xbe, 0xec, 0x28,
	0x39, 0x83, 0x23, 0x54, 0xbc, 0xc0, 0x5f, 0x9d, 0x6d, 0x18, 0x6c, 0x87, 0xa8, 0xf8, 0xe7, 0x8e,
	0x65, 0x39, 0xcc, 0xba, 0x11, 0xc8, 0x4b, 0x88, 0x9d, 0xa8, 0xd0, 0x3a, 0x56, 0xd5, 0x6d, 0xcf,
	0x3d, 0xc8, 0xd6, 0x30, 0xef, 0x87, 0xf0, 0xef, 0x27, 0xc8, 0x5b, 0x38, 0xb9, 0x13, 0x8a, 0xc9,
	0xc2, 0x19, 0xc4, 0x62, 0x83, 0x6c, 0xff, 0x76, 0x6e, 0x0c, 0xe2, 0x05, 0x32, 0x4e, 0x8f, 0x82,
	0xa3, 0x3b, 0x66, 0x5f, 0x61, 0xd6, 0xd5, 0x24, 0x87, 0xb9, 0xdd, 0xb0, 0xe5, 0xfb, 0x0f, 0x85,
	0xd1, 0xda, 0x15, 0x1b, 0x66, 0x37, 0xe1, 0x8e, 0x43, 0x7a, 0xdc, 0x70, 0xaa, 0xb5, 0xbb, 0x60,
	0x76, 0x43, 0x5e, 0x40, 0x1c, 0xae, 0xb0, 0xe2, 0xa1, 0xd9, 0x32, 0xa2, 0x33, 0x0f, 0xae, 0xc5,
	0x03, 0xde, 0x4e, 0xc2, 0x8f, 0xfd, 0xee, 0x6f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x53, 0x8a, 0x39,
	0x9c, 0xea, 0x03, 0x00, 0x00,
}
